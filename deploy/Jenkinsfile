pipeline {
    agent any
    environment {
        GIT_REPO_URL = 'https://github.com/Md-Ahatasham/laravel-pos-application.git'
        GIT_REPO_NAME = 'laravel-pos-application' // Repository name explicitly set
        GIT_BRANCH_NAME = 'master'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credential-id'
        DOCKERHUB_USERNAME = 'ahatashamcsecu'
    }

    parameters {
        choices (name: 'BRANCH', defaultValue: 'dev', choices: ['dev', 'staging', 'master'], description: 'Choose a branch to deploy')
    }

    stages {

        stage('Check Docker') {
            steps {
                script {
                    sh 'docker --version'
                }
            }
        }
        stage('Checkout Code') {
            steps {
                script {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH}"]],
                        userRemoteConfigs: [[url: "${env.GIT_REPO_URL}"]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def commitHash = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    def imageTag = "${env.BUILD_NUMBER}-${commitHash}"
                    def dockerImage = "${env.DOCKERHUB_USERNAME}/${env.GIT_REPO_NAME}:${imageTag}"

                    // Build the Docker image
                    sh "docker build -t ${dockerImage} -f ./codes/Dockerfile ."

                    // Store the image tag and name as environment variables
                    env.IMAGE_TAG = imageTag
                    env.DOCKER_IMAGE = dockerImage
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: "${env.DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                        sh """
                            echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin
                            docker push ${env.DOCKER_IMAGE}
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline completed successfully! Image: ${env.DOCKER_IMAGE}"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
