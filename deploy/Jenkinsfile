pipeline {
    agent any
    environment {
        GIT_REPO_URL = 'https://github.com/Md-Ahatasham/laravel-pos-application.git'
        GIT_REPO_NAME = 'laravel-pos-application' // Repository name explicitly set
        GIT_BRANCH_NAME = 'master'
        DOCKERHUB_CREDENTIALS = 'dockerhub-credential-id'
        DOCKERHUB_USERNAME = 'ahatashamcsecu'
        DEPLOYMENT_USER = 'sham'
        SINGLE_SERVER = '192.168.255.78'
    }

    parameters {
        choice (name: 'BRANCH', choices: ['dev', 'staging', 'master'], description: 'Choose a branch to deploy')
        choice (name: 'DEPLOYMENT_TARGET', choices: ['single', 'multiple'], description: 'Choose a server to deploy')
    }

    stages {

        stage('Checkout Code') {
            steps {
                script {

                   // define allowed branch
                   def allowedBranches = ['dev','staging','master']
                   // check selected branch is in the list or not
                   if(!allowedBranches.contains(params.BRANCH)){
                     error "Invalid branch selection: ${params.BRANCH}"
                   }
                    checkout([
                        $class: 'GitSCM',
//                         branches: [[name: "*/${params.BRANCH}"]],  // if use from within jenkins directly
                        branches: [[name: "${params.BRANCH}"]],
                        userRemoteConfigs: [[url: "${env.GIT_REPO_URL}"]]
                    ])
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    def commitHash = sh(returnStdout: true, script: 'git rev-parse --short HEAD').trim()
                    def imageTag = "${env.BUILD_NUMBER}"
                    def dockerImage = "${env.DOCKERHUB_USERNAME}/${env.GIT_REPO_NAME}:${imageTag}"

                    // Build the Docker image
                    sh "docker build -t ${dockerImage} -f ./codes/Dockerfile ./codes"

                    // Store the image tag and name as environment variables
                    env.IMAGE_TAG = imageTag
                    env.DOCKER_IMAGE = dockerImage
                }
            }
        }

        stage('Push to Docker Hub') {
            steps {
                script {
                   withCredentials([usernamePassword(credentialsId: 'dockerhub-credential-id', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                        // Log in to Docker Hub using the credentials
                        sh "echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin"

                        // Push the Docker image to Docker Hub
                        def image = docker.image("${DOCKER_IMAGE}")
                        image.push()

                    }
                }
            }
        }

        stage ('Deploy to server') {
           steps {
             script {
             if (params.DEPLOYMENT_TARGET == 'single') {

             withCredentials([usernamePassword(credentialsId: 'dockerhub-credential-id', usernameVariable: 'DOCKER_HUB_USER', passwordVariable: 'DOCKER_HUB_PASS')]) {
                     // Log in to Docker Hub using the credentials
                     //sh "echo ${DOCKER_HUB_PASS} | docker login -u ${DOCKER_HUB_USER} --password-stdin"

                    echo "Deploying to single server: ${env.SINGLE_SERVER}"
                       sh """
                           ssh ${env.DEPLOYMENT_USER}@${env.SINGLE_SERVER} '
                               docker login -u ${DOCKER_HUB_USER} -p ${DOCKER_HUB_PASS} &&
                               docker pull ${DOCKER_IMAGE}:${env.IMAGE_TAG}
                           '
                       """

                 }

               }
             }
           }
         }
    }

    post {
        success {
            echo "Pipeline completed successfully!"
        }
        failure {
            echo "Pipeline failed."
        }
    }
}
